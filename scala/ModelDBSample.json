{
    "paragraphs": [
        {
            "text": "%dep\nz.load(\"/home/testuser/modeldb/client/scala/libs/spark.ml/target/scala-2.11/ml.jar\") ",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479783741491_1584946376",
            "id": "20161121-220221_1988304200",
            "result": {
                "code": "ERROR",
                "type": "TEXT",
                "msg": "Must be used before SparkInterpreter (%spark) initialized\nHint: put this paragraph before any Spark code and restart Zeppelin/Interpreter"
            },
            "dateCreated": "2016-11-21T22:02:21-0500",
            "dateStarted": "2016-11-21T22:44:04-0500",
            "dateFinished": "2016-11-21T22:44:04-0500",
            "status": "ERROR",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:151"
        },
        {
            "text": "import edu.mit.csail.db.ml.modeldb.client.ModelDbSyncer._\nimport edu.mit.csail.db.ml.modeldb.client.{ModelDbSyncer, NewOrExistingProject, SyncableMetrics, DefaultExperiment, NewExperimentRun}\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.{DecisionTreeClassifier, LogisticRegression, RandomForestClassifier}\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.ml.tuning.{CrossValidator, ParamGridBuilder}\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.{SparkConf, SparkContext}\n",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479783801629_-1281189388",
            "id": "20161121-220321_1627829283",
            "dateCreated": "2016-11-21T22:03:21-0500",
            "dateStarted": "2016-11-21T22:44:04-0500",
            "dateFinished": "2016-11-21T22:34:06-0500",
            "status": "RUNNING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:152",
            "errorMessage": ""
        },
        {
            "text": "\n// Create a case class which represents a person (i.e. one row of the data file).\ncase class  Person(age: Integer, workclass: String, fnlwgt: Integer, education: String, education_num: Integer,\n                  marital_status: String, occupation: String, relationship: String, race: String, sex: String,\n                  capital_gain: Integer, capital_loss: Integer, hours_per_week: Integer, native_country: String,\n                  income_level: Double)",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479783857202_-2060428504",
            "id": "20161121-220417_369184852",
            "dateCreated": "2016-11-21T22:04:17-0500",
            "dateStarted": "2016-11-21T22:44:04-0500",
            "dateFinished": "2016-11-21T22:34:06-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:153",
            "errorMessage": ""
        },
        {
            "text": "// This should be the path to the UCI Adult dataset (https://archive.ics.uci.edu/ml/datasets/Adult).\nval pathToDataFile = \"home/testuser/mdbDependencies/adult.data\"",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785365201_-593157434",
            "id": "20161121-222925_1070578745",
            "dateCreated": "2016-11-21T22:29:25-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:154",
            "dateFinished": "2016-11-21T22:43:30-0500",
            "dateStarted": "2016-11-21T22:43:30-0500",
            "errorMessage": "",
            "focus": true
        },
        {
            "text": "// Set up the ModelDbSyncer.\nModelDbSyncer.setSyncer(\n  new ModelDbSyncer(projectConfig = NewOrExistingProject(\n    \"compare models\",\n    \"modeldbuser\",\n    \"we use the UCI Adult Census dataset to compare random forests, \"\n      + \"decision trees, and logistic regression\"\n  ),\n  experimentConfig = new DefaultExperiment,\n  experimentRunConfig = new NewExperimentRun\n  )\n)",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785340851_384074124",
            "id": "20161121-222900_762859995",
            "dateCreated": "2016-11-21T22:29:00-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:155",
            "dateFinished": "2016-11-21T22:43:32-0500",
            "dateStarted": "2016-11-21T22:43:32-0500",
            "errorMessage": "",
            "focus": true
        },
        {
            "text": "// Read the data file.\nimport spark.implicits._\n\nval rawCsv = sc.textFile(pathToDataFile)",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785444180_792262059",
            "id": "20161121-223044_763992331",
            "dateCreated": "2016-11-21T22:30:44-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:156",
            "dateFinished": "2016-11-21T22:43:34-0500",
            "dateStarted": "2016-11-21T22:43:33-0500",
            "errorMessage": "",
            "focus": true
        },
        {
            "text": "// Create an RDD[Person] from the data.\nval rows = rawCsv\n  .filter(_.length > 5) // Remove empty lines. The choice of 5 is arbitrary.\n  .map { (line) =>\n  // Split the line on the commas.\n  // Then, partition it into Array(Array(feature1, feature2, ..., feature14), Array(label)).\n  val splitted = line.split(\",\").splitAt(14)\n\n  // Figure out what the label is, then assign 0.0 to represent an income less than $50K and 1.0 to represent an income\n  // above $50K.\n  val labelRaw = splitted._2(0).trim\n  val label = if (labelRaw == \"<=50K\") 0.0\n  else if (labelRaw == \">50K\") 1.0\n  else throw new IllegalArgumentException(\"Invalid Label \" + labelRaw)\n\n  // Now, trim each of the features.\n  val f = splitted._1.map(_.trim)\n\n  // Create the person object (and convert features to integers where appropriate).\n  new Person(\n    f(0).toInt,\n    f(1),\n    f(2).toInt,\n    f(3),\n    f(4).toInt,\n    f(5),\n    f(6),\n    f(7),\n    f(8),\n    f(9),\n    f(10).toInt,\n    f(11).toInt,\n    f(12).toInt,\n    f(13),\n    label\n  )\n}\nval rawData = rows.toDF()",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479783872285_-654140625",
            "id": "20161121-220432_625842206",
            "dateCreated": "2016-11-21T22:04:32-0500",
            "dateStarted": "2016-11-21T22:43:37-0500",
            "dateFinished": "2016-11-21T22:43:38-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:157",
            "errorMessage": "",
            "focus": true
        },
        {
            "text": "// Now let's process the features into something a model can use.\n// To do that, let's first see which features are strings and which are not (we ignore \"income_level\" because it's\n// the label).\nval (stringFields, nonStringFields) = rawData.schema.partition{ (field) =>\n  field.dataType == org.apache.spark.sql.types.StringType\n}\nval stringFieldNames = stringFields.map(_.name)\nval nonStringFieldNames = nonStringFields.map(_.name).filter(_ != \"income_level\")\n\n// Index categorical variables.\nval indexers = stringFieldNames.map { (field) =>\n  new StringIndexer()\n    .setInputCol(field)\n    .setOutputCol(field + \"_index\")\n}\n\n// One-hot encode categorical variables.\nval encoders = stringFieldNames.map { (field) =>\n  new OneHotEncoder()\n    .setInputCol(field + \"_index\")\n    .setOutputCol(field + \"_vec\")\n}\n\n// Now let's combine our features into a \"features\" vector.\nval assembler = new VectorAssembler()\n  .setInputCols((stringFieldNames.map(_ + \"_vec\") ++ nonStringFieldNames).toArray)\n  .setOutputCol(\"features\")\n\n// One final pre-processing step: Let's use a StringIndexer on the income level.\n// NOTE: I don't actually think this is necessary.\nval labelIndexer = new StringIndexer()\n  .setInputCol(\"income_level\")\n  .setOutputCol(\"income_level_index\")\n\n// Create a pipeline for preprocessing.\nval preprocessingPipeline = new Pipeline()\n  .setStages((indexers ++ encoders ++ Seq(assembler, labelIndexer)).toArray)\n\n// Generate the preprocessed data.\nval data = preprocessingPipeline\n  .fitSync(rawData)\n  .transformSync(rawData)",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479784710442_228766908",
            "id": "20161121-221830_1528403828",
            "dateCreated": "2016-11-21T22:18:30-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:158",
            "dateFinished": "2016-11-21T22:34:25-0500",
            "dateStarted": "2016-11-21T22:34:08-0500",
            "errorMessage": ""
        },
        {
            "text": "// Training/testing split.\nval Array(training, testing) = data.randomSplit(Array(0.7, 0.3))",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785494585_-1151996727",
            "id": "20161121-223134_997595303",
            "dateCreated": "2016-11-21T22:31:34-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:159",
            "dateFinished": "2016-11-21T22:34:26-0500",
            "dateStarted": "2016-11-21T22:34:10-0500",
            "errorMessage": ""
        },
        {
            "text": "// Column names.\nval labelCol = \"income_level_index\"\nval featuresCol = \"features\"\nval predictionCol = \"prediction\"\n\n// We'll compare three models - Random Forest, LogisticRegression, and Decision Tree. First, create the estimators.\nval dt = new DecisionTreeClassifier()\n  .setLabelCol(labelCol)\n  .setFeaturesCol(featuresCol)\nval rf = new RandomForestClassifier()\n  .setNumTrees(100)\n  .setLabelCol(labelCol)\n  .setFeaturesCol(featuresCol)\nval lr = new LogisticRegression()\n  .setLabelCol(labelCol)\n  .setFeaturesCol(featuresCol)\n  .setMaxIter(100)\n  .setElasticNetParam(0.5)\n\nModelDbSyncer.annotate(\"I'm going to compare\", dt, rf, \" and \", lr)\n\nval estimators = Array(dt, lr, rf)",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785512010_722915312",
            "id": "20161121-223152_1630530024",
            "dateCreated": "2016-11-21T22:31:52-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:160",
            "dateFinished": "2016-11-21T22:34:27-0500",
            "dateStarted": "2016-11-21T22:34:26-0500",
            "errorMessage": ""
        },
        {
            "text": "// Make the evaluator.\nval eval = new BinaryClassificationEvaluator()\n  .setLabelCol(labelCol)\n\n// Create search grids.\nval dtGrid = new ParamGridBuilder()\n  .addGrid(dt.impurity, Array(\"gini\", \"entropy\"))\n  .addGrid(dt.maxDepth, Array(3, 5, 7))\n\nval rfGrid = new ParamGridBuilder()\n  .addGrid(rf.featureSubsetStrategy, Array(\"onethird\", \"sqrt\", \"log2\"))\n  .addGrid(rf.impurity, Array(\"gini\", \"entropy\"))\n\nval lrGrid = new ParamGridBuilder()\n  .addGrid(lr.elasticNetParam, Array(0.01, 0.1, 0.5, 0.7))\n  .addGrid(lr.regParam, Array(0.01, 0.1, 1))\n\nval grids = Array(dtGrid, lrGrid, rfGrid)",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785546098_-840826812",
            "id": "20161121-223226_522046434",
            "dateCreated": "2016-11-21T22:32:26-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:161",
            "dateFinished": "2016-11-21T22:34:28-0500",
            "dateStarted": "2016-11-21T22:34:26-0500",
            "errorMessage": ""
        },
        {
            "text": "// Create the cross validation estimators for each.\nval cvEstimators = (estimators zip grids).map { case (est, grid) =>\n  new CrossValidator()\n      .setEstimator(est)\n      .setEvaluator(eval)\n      .setNumFolds(3)\n      .setEstimatorParamMaps(grid.build())\n}",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785558314_1893598945",
            "id": "20161121-223238_596937531",
            "dateCreated": "2016-11-21T22:32:38-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:162",
            "dateFinished": "2016-11-21T22:34:29-0500",
            "dateStarted": "2016-11-21T22:34:27-0500",
            "errorMessage": ""
        },
        {
            "text": "// Fit the cross validation estimators.\nval models = cvEstimators.map(_.fitSync(training))",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785570096_-1052808132",
            "id": "20161121-223250_1796659467",
            "dateCreated": "2016-11-21T22:32:50-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:163",
            "dateFinished": "2016-11-21T22:41:10-0500",
            "dateStarted": "2016-11-21T22:34:29-0500",
            "errorMessage": ""
        },
        {
            "text": "// Make predictions on the testing data.\nval predictions = models.map(_.transformSync(testing))",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785581495_-866022669",
            "id": "20161121-223301_1261506073",
            "dateCreated": "2016-11-21T22:33:01-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:164",
            "dateFinished": "2016-11-21T22:41:16-0500",
            "dateStarted": "2016-11-21T22:34:29-0500",
            "errorMessage": ""
        },
        {
            "text": "// Now compute metrics for each model.\nval metrics = (models zip predictions).map { case (model, prediction) =>\n  SyncableMetrics.ComputeMulticlassMetrics(model, prediction, labelCol, predictionCol)\n}\n\n// Print out the accuracy for each estimator.\n(estimators zip metrics).foreach { case (est, metric) =>\n  println(est.getClass.getSimpleName)\n  println(\"f: \" + metric.accuracy)\n}",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true,
                "editorMode": "ace/mode/scala"
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785588301_-1074925998",
            "id": "20161121-223308_1639288903",
            "dateCreated": "2016-11-21T22:33:08-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "$$hashKey": "object:165",
            "dateFinished": "2016-11-21T22:41:23-0500",
            "dateStarted": "2016-11-21T22:41:10-0500",
            "errorMessage": ""
        },
        {
            "config": {
                "colWidth": 12,
                "graph": {
                    "mode": "table",
                    "height": 300,
                    "optionOpen": false,
                    "keys": [],
                    "values": [],
                    "groups": [],
                    "scatter": {}
                },
                "enabled": true
            },
            "settings": {
                "params": {},
                "forms": {}
            },
            "jobName": "paragraph_1479785645229_1780588394",
            "id": "20161121-223405_1363355375",
            "dateCreated": "2016-11-21T22:34:05-0500",
            "status": "PENDING",
            "progressUpdateIntervalMs": 500,
            "focus": true,
            "$$hashKey": "object:1305",
            "dateUpdated": "2016-11-21T22:44:04-0500",
            "errorMessage": "",
            "text": ""
        }
    ],
    "name": "ModelDB Sample",
    "id": "2C44QSZC4",
    "angularObjects": {
        "2C25B24QR:shared_process": [],
        "2C1XAZN4B:shared_process": [],
        "2C3C3UQFJ:shared_process": [],
        "2C49S8TK9:shared_process": [],
        "2C2GJE6VV:shared_process": [],
        "2C1WT96Q3:shared_process": [],
        "2C1WDU5E3:shared_process": [],
        "2C4SKZBU5:shared_process": [],
        "2C4KERAAT:shared_process": [],
        "2C1MP4PQE:shared_process": [],
        "2C4SVKP7C:shared_process": [],
        "2C3F7GS4H:shared_process": [],
        "2C4N37CWS:shared_process": [],
        "2C22NP1SH:shared_process": [],
        "2C4BZUUTC:shared_process": [],
        "2C2KP2MAG:shared_process": [],
        "2C55UXX9A:shared_process": [],
        "2C1VHBUMJ:shared_process": []
    },
    "config": {
        "looknfeel": "default"
    },
    "info": {}
}